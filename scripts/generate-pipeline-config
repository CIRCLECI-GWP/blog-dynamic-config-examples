#!/bin/bash 
set -o pipefail

TF_VERSION=$1 # Terraform CLI Version to install
DOCTL_VERSION=$2 # Digital Ocean CLI Version to install

# Create the configs directory if it doesn't exist
if [ ! -d "configs/" ]; then
  mkdir -p configs/
fi

cat << EOF > configs/generated_config.yml
version: 2.1
orbs:
  docker: circleci/docker@2.8.2
  node: circleci/node@7.1.0
  snyk: snyk/snyk@2.3.0
  terraform: circleci/terraform@3.6.0  
jobs:
  scan_app:
    docker:
      - image: cimg/node:24.0.2
    steps:
      - checkout
      - node/install-packages:
          override-ci-command: npm install
          cache-path: ~/project/node_modules 
      - snyk/scan:
          fail-on-issues: false
          monitor-on-build: false
  create_do_k8s_cluster:
    docker:
      - image: cimg/node:24.0.2
    steps:
      - checkout
      - run:
          name: Create .terraformrc file locally
          command: echo "credentials \"app.terraform.io\" {token = \"\$TERRAFORM_TOKEN\"}" > \$HOME/.terraformrc   
      - terraform/install:
          terraform_version: $TF_VERSION
          arch: "amd64"
          os: "linux"
      - terraform/init:
          path: ./terraform/do_create_k8s
      - run:
          name: Create K8s Cluster on DigitalOcean 
          command: |
            export CLUSTER_NAME=\${CIRCLE_PROJECT_REPONAME}
            export TAG=0.1.<< pipeline.number >>
            curl -sL https://github.com/digitalocean/doctl/releases/download/v$DOCTL_VERSION/doctl-$DOCTL_VERSION-linux-amd64.tar.gz | tar -xzv
            sudo mv doctl /usr/local/bin
            export DO_K8S_SLUG_VER="\$(doctl kubernetes options versions -o json -t \$DIGITAL_OCEAN_TOKEN | jq -r '.[0] | .slug')"
            cd terraform/do_create_k8s
            terraform init
cat <<EOF > terraform.auto.tfvars
do_token = "\$DIGITAL_OCEAN_TOKEN"
cluster_name = "\$CIRCLE_PROJECT_REPONAME"
do_k8s_slug_ver = "\$DO_K8S_SLUG_VER"
EOF
            terraform apply -auto-approve
  deploy_to_k8s:
    docker:
      - image: cimg/node:24.0.2
    steps:
      - checkout
      - run:
          name: Create .terraformrc file locally
          command: echo "credentials \"app.terraform.io\" {token = \"\$TERRAFORM_TOKEN\"}" > \$HOME/.terraformrc
      - terraform/install:
          terraform_version: $TF_VERSION
          arch: "amd64"
          os: "linux"
      - run:
          name: Deploy Application to K8s on DigitalOcean 
          command: |
            export CLUSTER_NAME=\${CIRCLE_PROJECT_REPONAME}
            export TAG=0.1.<< pipeline.number >>
            export DOCKER_IMAGE="\${DOCKER_LOGIN}/\${CIRCLE_PROJECT_REPONAME}:\$TAG"
            curl -sL https://github.com/digitalocean/doctl/releases/download/v$DOCTL_VERSION/doctl-$DOCTL_VERSION-linux-amd64.tar.gz | tar -xzv
            sudo mv doctl /usr/local/bin          
            cd terraform/do_k8s_deploy_app
            doctl auth init -t \$DIGITAL_OCEAN_TOKEN
            doctl kubernetes cluster kubeconfig save \$CLUSTER_NAME
            terraform init
cat <<EOF > terraform.auto.tfvars
do_token = "\$DIGITAL_OCEAN_TOKEN"
cluster_name = "\$CIRCLE_PROJECT_REPONAME"
docker_image = "\$DOCKER_LOGIN/\$CIRCLE_PROJECT_REPONAME:0.1.\${CIRCLE_BUILD_NUM}"
EOF
            terraform apply -auto-approve
            # Save the Load Balancer Public IP Address
            export ENDPOINT="\$(terraform output lb_public_ip)"
            mkdir -p /tmp/do_k8s/
            echo 'export ENDPOINT='\${ENDPOINT} > /tmp/do_k8s/dok8s-endpoint
      - persist_to_workspace:
          root: /tmp/do_k8s
          paths:
            - "*"
workflows:
  scan_deploy:
    jobs:
      - scan_app
      - scan_push_docker_image
      - run_tests
      - create_do_k8s_cluster
      - deploy_to_k8s:
          requires:
            - create_do_k8s_cluster
            - scan_push_docker_image
      - smoketest_k8s_deployment:
          requires:
            - deploy_to_k8s
      - approve_destroy:
          type: approval
          requires:
            - smoketest_k8s_deployment
      - destroy_k8s_cluster:
          requires:
            - approve_destroy
EOF
